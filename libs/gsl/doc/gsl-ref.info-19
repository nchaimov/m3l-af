This is gsl-ref.info, produced by makeinfo version 4.2 from
gsl-ref.texi.

INFO-DIR-SECTION Scientific software
START-INFO-DIR-ENTRY
* gsl-ref: (gsl-ref).                   GNU Scientific Library - Reference
END-INFO-DIR-ENTRY


File: gsl-ref.info,  Node: Examining floating point registers,  Next: Handling floating point exceptions,  Prev: Using gdb,  Up: Debugging Numerical Programs

Examining floating point registers
==================================

   The contents of floating point registers can be examined using the
command `info float' (not available on all platforms).

     (gdb) info float
          st0: 0xc4018b895aa17a945000  Valid Normal -7.838871e+308
          st1: 0x3ff9ea3f50e4d7275000  Valid Normal 0.0285946
          st2: 0x3fe790c64ce27dad4800  Valid Normal 6.7415931e-08
          st3: 0x3ffaa3ef0df6607d7800  Spec  Normal 0.0400229
          st4: 0x3c028000000000000000  Valid Normal 4.4501477e-308
          st5: 0x3ffef5412c22219d9000  Zero  Normal 0.9580257
          st6: 0x3fff8000000000000000  Valid Normal 1
          st7: 0xc4028b65a1f6d243c800  Valid Normal -1.566206e+309
        fctrl: 0x0272 53 bit; NEAR; mask DENOR UNDER LOS;
        fstat: 0xb9ba flags 0001; top 7; excep DENOR OVERF UNDER LOS
         ftag: 0x3fff
          fip: 0x08048b5c
          fcs: 0x051a0023
       fopoff: 0x08086820
       fopsel: 0x002b

Individual registers can be examined using the variables $REG, where
REG is the register name.

     (gdb) p $st1
     $1 = 0.02859464454261210347719


File: gsl-ref.info,  Node: Handling floating point exceptions,  Next: GCC warning options for numerical programs,  Prev: Examining floating point registers,  Up: Debugging Numerical Programs

Handling floating point exceptions
==================================

   It is possible to stop the program whenever a `SIGFPE' floating
point exception occurs.  This can be useful for finding the cause of an
unexpected infinity or `NaN'.  The current handler settings can be
shown with the command `info signal SIGFPE'.

     (gdb) info signal SIGFPE
     Signal  Stop  Print  Pass to program Description
     SIGFPE  Yes   Yes    Yes             Arithmetic exception

Unless the program uses a signal handler the default setting should be
changed so that SIGFPE is not passed to the program, as this would cause
it to exit.  The command `handle SIGFPE stop nopass' prevents this.

     (gdb) handle SIGFPE stop nopass
     Signal  Stop  Print  Pass to program Description
     SIGFPE  Yes   Yes    No              Arithmetic exception

Depending on the platform it may be necessary to instruct the kernel to
generate signals for floating point exceptions.  For programs using GSL
this can be achieved using the `GSL_IEEE_MODE' environment variable in
conjunction with the function `gsl_ieee_env_setup()' as described in
*note IEEE floating-point arithmetic::.

     (gdb) set env GSL_IEEE_MODE=double-precision


File: gsl-ref.info,  Node: GCC warning options for numerical programs,  Next: Debugging References,  Prev: Handling floating point exceptions,  Up: Debugging Numerical Programs

GCC warning options for numerical programs
==========================================

   Writing reliable numerical programs in C requires great care.  The
following GCC warning options are recommended when compiling numerical
programs:

     gcc -ansi -pedantic -Werror -Wall -W
       -Wmissing-prototypes -Wstrict-prototypes
       -Wtraditional -Wconversion -Wshadow
       -Wpointer-arith -Wcast-qual -Wcast-align
       -Wwrite-strings -Wnested-externs
       -fshort-enums -fno-common -Dinline= -g -O4

For details of each option consult the manual `Using and Porting GCC'.
The following table gives a brief explanation of what types of errors
these options catch.

`-ansi -pedantic'
     Use ANSI C, and reject any non-ANSI extensions.  These flags help
     in writing portable programs that will compile on other systems.

`-Werror'
     Consider warnings to be errors, so that compilation stops.  This
     prevents warnings from scrolling off the top of the screen and
     being lost.  You won't be able to compile the program until it is
     completely warning-free.

`-Wall'
     This turns on a set of warnings for common programming problems.
     You need `-Wall', but it is not enough on its own.

`-O4'
     Turn on optimization.  The warnings for uninitialized variables in
     `-Wall' rely on the optimizer to analyze the code.  If there is no
     optimization then the warnings aren't generated.

`-W'
     This turns on some extra warnings not included in `-Wall', such as
     missing return values and comparisons between signed and unsigned
     integers.

`-Wmissing-prototypes -Wstrict-prototypes'
     Warn if there are any missing or inconsistent prototypes.  Without
     prototypes it is harder to detect problems with incorrect
     arguments.

`-Wtraditional'
     This warns about certain constructs that behave differently in
     traditional and ANSI C. Whether the traditional or ANSI
     interpretation is used might be unpredictable on other compilers.

`-Wconversion'
     The main use of this option is to warn about conversions from
     signed to unsigned integers.  For example, `unsigned int x = -1'.
     If you need to perform such a conversion you can use an explicit
     cast.

`-Wshadow'
     This warns whenever a local variable shadows another local
     variable.  If two variables have the same name then it is a
     potential source of confusion.

`-Wpointer-arith -Wcast-qual -Wcast-align'
     These options warn if you try to do pointer arithmetic for types
     which don't have a size, such as `void', if you remove a `const'
     cast from a pointer, or if you cast a pointer to a type which has a
     different size, causing an invalid alignment.

`-Wwrite-strings'
     This option gives string constants a `const' qualifier so that it
     will be a compile-time error to attempt to overwrite them.

`-fshort-enums'
     This option makes the type of `enum' as short as possible.
     Normally this makes an `enum' different from an `int'.
     Consequently any attempts to assign a pointer-to-int to a
     pointer-to-enum will generate a cast-alignment warning.

`-fno-common'
     This option prevents global variables being simultaneously defined
     in different object files (you get an error at link time).  Such a
     variable should be defined in one file and referred to in other
     files with an `extern' declaration.

`-Wnested-externs'
     This warns if an `extern' declaration is encountered within an
     function.

`-Dinline='
     The `inline' keyword is not part of ANSI C. Thus if you want to use
     `-ansi' with a program which uses inline functions you can use this
     preprocessor definition to remove the `inline' keywords.

`-g'
     It always makes sense to put debugging symbols in the executable
     so that you can debug it using `gdb'.  The only effect of
     debugging symbols is to increase the size of the file, and you can
     use the `strip' command to remove them later if necessary.


File: gsl-ref.info,  Node: Debugging References,  Prev: GCC warning options for numerical programs,  Up: Debugging Numerical Programs

References and Further Reading
==============================

The following books are essential reading for anyone writing and
debugging numerical programs with GCC and GDB.

     R.M. Stallman, `Using and Porting GNU CC', Free Software
     Foundation, ISBN 1882114388

     R.M. Stallman, R.H. Pesch, `Debugging with GDB: The GNU
     Source-Level Debugger', Free Software Foundation, ISBN 1882114779


File: gsl-ref.info,  Node: Contributors to GSL,  Next: Autoconf Macros,  Prev: Debugging Numerical Programs,  Up: Top

Contributors to GSL
*******************

   (See the AUTHORS file in the distribution for up-to-date
information.)

*Mark Galassi*
     Conceived GSL (with James Theiler) and wrote the design document.
     Wrote the simulated annealing package and the relevant chapter in
     the manual.

*James Theiler*
     Conceived GSL (with Mark Galassi).  Wrote the random number
     generators and the relevant chapter in this manual.

*Jim Davies*
     Wrote the statistical routines and the relevant chapter in this
     manual.

*Brian Gough*
     FFTs, numerical integration, random number generators and
     distributions, root finding, minimization and fitting, polynomial
     solvers, complex numbers, physical constants, permutations, vector
     and matrix functions, histograms, statistics, ieee-utils, revised
     CBLAS Level 2 & 3, matrix decompositions and eigensystems.

*Reid Priedhorsky*
     Wrote and documented the initial version of the root finding
     routines while at Los Alamos National Laboratory, Mathematical
     Modeling and Analysis Group.

*Gerard Jungman*
     Series acceleration, ODEs, BLAS, Linear Algebra, Eigensystems,
     Hankel Transforms.

*Mike Booth*
     Wrote the Monte Carlo library.

*Jorma Olavi Ta"htinen*
     Wrote the initial complex arithmetic functions.

*Thomas Walter*
     Wrote the initial heapsort routines and cholesky decomposition.

*Fabrice Rossi*
     Multidimensional minimization.

*Carlo Perassi*
     Implementation of the random number generators in Knuth's
     `Seminumerical Algorithms', 3rd Ed.

*Szymon Jaroszewicz*
     Write the routines for generating combinations


File: gsl-ref.info,  Node: Autoconf Macros,  Next: GSL CBLAS Library,  Prev: Contributors to GSL,  Up: Top

Autoconf Macros
***************

The following autoconf test will check for extern inline,

     dnl Check for "extern inline", using a modified version
     dnl of the test for AC_C_INLINE from acspecific.mt
     dnl
     AC_CACHE_CHECK([for extern inline], ac_cv_c_extern_inline,
     [ac_cv_c_extern_inline=no
     AC_TRY_COMPILE([extern $ac_cv_c_inline double foo(double x);
     extern $ac_cv_c_inline double foo(double x) { return x+1.0; };
     double foo (double x) { return x + 1.0; };],
     [  foo(1.0)  ],
     [ac_cv_c_extern_inline="yes"])
     ])
     
     if test "$ac_cv_c_extern_inline" != no ; then
       AC_DEFINE(HAVE_INLINE,1)
       AC_SUBST(HAVE_INLINE)
     fi


File: gsl-ref.info,  Node: GSL CBLAS Library,  Next: Reporting Bugs,  Prev: Autoconf Macros,  Up: Top

GSL CBLAS Library
*****************

   The prototypes for the low-level CBLAS functions are declared in the
file `gsl_cblas.h'.  For the definition of the functions consult the
documentation available from Netlib (*note BLAS References and Further
Reading::).

* Menu:

* Level 1 CBLAS Functions::
* Level 2 CBLAS Functions::
* Level 3 CBLAS Functions::
* GSL CBLAS Examples::


File: gsl-ref.info,  Node: Level 1 CBLAS Functions,  Next: Level 2 CBLAS Functions,  Up: GSL CBLAS Library

Level 1
=======

 - Function: float cblas_sdsdot (const int N, const float ALPHA, const
          float *X, const int INCX, const float *Y, const int INCY)

 - Function: double cblas_dsdot (const int N, const float *X, const int
          INCX, const float *Y, const int INCY)

 - Function: float cblas_sdot (const int N, const float *X, const int
          INCX, const float *Y, const int INCY)

 - Function: double cblas_ddot (const int N, const double *X, const int
          INCX, const double *Y, const int INCY)

 - Function: void cblas_cdotu_sub (const int N, const void *X, const
          int INCX, const void *Y, const int INCY, void *DOTU)

 - Function: void cblas_cdotc_sub (const int N, const void *X, const
          int INCX, const void *Y, const int INCY, void *DOTC)

 - Function: void cblas_zdotu_sub (const int N, const void *X, const
          int INCX, const void *Y, const int INCY, void *DOTU)

 - Function: void cblas_zdotc_sub (const int N, const void *X, const
          int INCX, const void *Y, const int INCY, void *DOTC)

 - Function: float cblas_snrm2 (const int N, const float *X, const int
          INCX)

 - Function: float cblas_sasum (const int N, const float *X, const int
          INCX)

 - Function: double cblas_dnrm2 (const int N, const double *X, const
          int INCX)

 - Function: double cblas_dasum (const int N, const double *X, const
          int INCX)

 - Function: float cblas_scnrm2 (const int N, const void *X, const int
          INCX)

 - Function: float cblas_scasum (const int N, const void *X, const int
          INCX)

 - Function: double cblas_dznrm2 (const int N, const void *X, const int
          INCX)

 - Function: double cblas_dzasum (const int N, const void *X, const int
          INCX)

 - Function: CBLAS_INDEX cblas_isamax (const int N, const float *X,
          const int INCX)

 - Function: CBLAS_INDEX cblas_idamax (const int N, const double *X,
          const int INCX)

 - Function: CBLAS_INDEX cblas_icamax (const int N, const void *X,
          const int INCX)

 - Function: CBLAS_INDEX cblas_izamax (const int N, const void *X,
          const int INCX)

 - Function: void cblas_sswap (const int N, float *X, const int INCX,
          float *Y, const int INCY)

 - Function: void cblas_scopy (const int N, const float *X, const int
          INCX, float *Y, const int INCY)

 - Function: void cblas_saxpy (const int N, const float ALPHA, const
          float *X, const int INCX, float *Y, const int INCY)

 - Function: void cblas_dswap (const int N, double *X, const int INCX,
          double *Y, const int INCY)

 - Function: void cblas_dcopy (const int N, const double *X, const int
          INCX, double *Y, const int INCY)

 - Function: void cblas_daxpy (const int N, const double ALPHA, const
          double *X, const int INCX, double *Y, const int INCY)

 - Function: void cblas_cswap (const int N, void *X, const int INCX,
          void *Y, const int INCY)

 - Function: void cblas_ccopy (const int N, const void *X, const int
          INCX, void *Y, const int INCY)

 - Function: void cblas_caxpy (const int N, const void *ALPHA, const
          void *X, const int INCX, void *Y, const int INCY)

 - Function: void cblas_zswap (const int N, void *X, const int INCX,
          void *Y, const int INCY)

 - Function: void cblas_zcopy (const int N, const void *X, const int
          INCX, void *Y, const int INCY)

 - Function: void cblas_zaxpy (const int N, const void *ALPHA, const
          void *X, const int INCX, void *Y, const int INCY)

 - Function: void cblas_srotg (float *A, float *B, float *C, float *S)

 - Function: void cblas_srotmg (float *D1, float *D2, float *B1, const
          float B2, float *P)

 - Function: void cblas_srot (const int N, float *X, const int INCX,
          float *Y, const int INCY, const float C, const float S)

 - Function: void cblas_srotm (const int N, float *X, const int INCX,
          float *Y, const int INCY, const float *P)

 - Function: void cblas_drotg (double *A, double *B, double *C, double
          *S)

 - Function: void cblas_drotmg (double *D1, double *D2, double *B1,
          const double B2, double *P)

 - Function: void cblas_drot (const int N, double *X, const int INCX,
          double *Y, const int INCY, const double C, const double S)

 - Function: void cblas_drotm (const int N, double *X, const int INCX,
          double *Y, const int INCY, const double *P)

 - Function: void cblas_sscal (const int N, const float ALPHA, float
          *X, const int INCX)

 - Function: void cblas_dscal (const int N, const double ALPHA, double
          *X, const int INCX)

 - Function: void cblas_cscal (const int N, const void *ALPHA, void *X,
          const int INCX)

 - Function: void cblas_zscal (const int N, const void *ALPHA, void *X,
          const int INCX)

 - Function: void cblas_csscal (const int N, const float ALPHA, void
          *X, const int INCX)

 - Function: void cblas_zdscal (const int N, const double ALPHA, void
          *X, const int INCX)


File: gsl-ref.info,  Node: Level 2 CBLAS Functions,  Next: Level 3 CBLAS Functions,  Prev: Level 1 CBLAS Functions,  Up: GSL CBLAS Library

Level 2
=======

 - Function: void cblas_sgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const float
          ALPHA, const float *A, const int LDA, const float *X, const
          int INCX, const float BETA, float *Y, const int INCY)

 - Function: void cblas_sgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const float ALPHA, const float *A, const
          int LDA, const float *X, const int INCX, const float BETA,
          float *Y, const int INCY)

 - Function: void cblas_strmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *A, const int
          LDA, float *X, const int INCX)

 - Function: void cblas_stbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const float
          *A, const int LDA, float *X, const int INCX)

 - Function: void cblas_stpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *AP, float *X,
          const int INCX)

 - Function: void cblas_strsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *A, const int
          LDA, float *X, const int INCX)

 - Function: void cblas_stbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const float
          *A, const int LDA, float *X, const int INCX)

 - Function: void cblas_stpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *AP, float *X,
          const int INCX)

 - Function: void cblas_dgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const
          double ALPHA, const double *A, const int LDA, const double
          *X, const int INCX, const double BETA, double *Y, const int
          INCY)

 - Function: void cblas_dgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const double ALPHA, const double *A, const
          int LDA, const double *X, const int INCX, const double BETA,
          double *Y, const int INCY)

 - Function: void cblas_dtrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *A, const int
          LDA, double *X, const int INCX)

 - Function: void cblas_dtbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const double
          *A, const int LDA, double *X, const int INCX)

 - Function: void cblas_dtpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *AP, double
          *X, const int INCX)

 - Function: void cblas_dtrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *A, const int
          LDA, double *X, const int INCX)

 - Function: void cblas_dtbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const double
          *A, const int LDA, double *X, const int INCX)

 - Function: void cblas_dtpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *AP, double
          *X, const int INCX)

 - Function: void cblas_cgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void
          *ALPHA, const void *A, const int LDA, const void *X, const
          int INCX, const void *BETA, void *Y, const int INCY)

 - Function: void cblas_cgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void *ALPHA, const void *A, const int
          LDA, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_ctrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ctbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ctpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ctrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ctbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ctpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_zgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void
          *ALPHA, const void *A, const int LDA, const void *X, const
          int INCX, const void *BETA, void *Y, const int INCY)

 - Function: void cblas_zgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void *ALPHA, const void *A, const int
          LDA, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_ztrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ztbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ztpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ztrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ztbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ztpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ssymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *A, const int LDA, const float *X, const int INCX, const
          float BETA, float *Y, const int INCY)

 - Function: void cblas_ssbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const float ALPHA,
          const float *A, const int LDA, const float *X, const int
          INCX, const float BETA, float *Y, const int INCY)

 - Function: void cblas_sspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *AP, const float *X, const int INCX, const float BETA, float
          *Y, const int INCY)

 - Function: void cblas_sger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const float ALPHA, const float *X, const int
          INCX, const float *Y, const int INCY, float *A, const int LDA)

 - Function: void cblas_ssyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, float *A, const int LDA)

 - Function: void cblas_sspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, float *AP)

 - Function: void cblas_ssyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, const float *Y, const int INCY, float *A,
          const int LDA)

 - Function: void cblas_sspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, const float *Y, const int INCY, float *A)

 - Function: void cblas_dsymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *A, const int LDA, const double *X, const int INCX,
          const double BETA, double *Y, const int INCY)

 - Function: void cblas_dsbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const double
          ALPHA, const double *A, const int LDA, const double *X, const
          int INCX, const double BETA, double *Y, const int INCY)

 - Function: void cblas_dspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *AP, const double *X, const int INCX, const double
          BETA, double *Y, const int INCY)

 - Function: void cblas_dger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const double ALPHA, const double *X, const
          int INCX, const double *Y, const int INCY, double *A, const
          int LDA)

 - Function: void cblas_dsyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, double *A, const int LDA)

 - Function: void cblas_dspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, double *AP)

 - Function: void cblas_dsyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, const double *Y, const int INCY,
          double *A, const int LDA)

 - Function: void cblas_dspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, const double *Y, const int INCY,
          double *A)

 - Function: void cblas_chemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *A, const int LDA, const void *X, const int INCX, const void
          *BETA, void *Y, const int INCY)

 - Function: void cblas_chbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *X, const int INCX,
          const void *BETA, void *Y, const int INCY)

 - Function: void cblas_chpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *AP, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_cgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_cgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_cher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void
          *X, const int INCX, void *A, const int LDA)

 - Function: void cblas_chpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void
          *X, const int INCX, void *A)

 - Function: void cblas_cher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *A,
          const int LDA)

 - Function: void cblas_chpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *AP)

 - Function: void cblas_zhemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *A, const int LDA, const void *X, const int INCX, const void
          *BETA, void *Y, const int INCY)

 - Function: void cblas_zhbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *X, const int INCX,
          const void *BETA, void *Y, const int INCY)

 - Function: void cblas_zhpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *AP, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_zgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_zgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_zher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void
          *X, const int INCX, void *A, const int LDA)

 - Function: void cblas_zhpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void
          *X, const int INCX, void *A)

 - Function: void cblas_zher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *A,
          const int LDA)

 - Function: void cblas_zhpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *AP)


File: gsl-ref.info,  Node: Level 3 CBLAS Functions,  Next: GSL CBLAS Examples,  Prev: Level 2 CBLAS Functions,  Up: GSL CBLAS Library

Level 3
=======

 - Function: void cblas_sgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const float ALPHA,
          const float *A, const int LDA, const float *B, const int LDB,
          const float BETA, float *C, const int LDC)

 - Function: void cblas_ssymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const float ALPHA, const float *A, const int
          LDA, const float *B, const int LDB, const float BETA, float
          *C, const int LDC)

 - Function: void cblas_ssyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const float *A, const int
          LDA, const float BETA, float *C, const int LDC)

 - Function: void cblas_ssyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const float ALPHA, const float *A, const
          int LDA, const float *B, const int LDB, const float BETA,
          float *C, const int LDC)

 - Function: void cblas_strmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float *A, const int
          LDA, float *B, const int LDB)

 - Function: void cblas_strsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float *A, const int
          LDA, float *B, const int LDB)

 - Function: void cblas_dgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const double ALPHA,
          const double *A, const int LDA, const double *B, const int
          LDB, const double BETA, double *C, const int LDC)

 - Function: void cblas_dsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const double ALPHA, const double *A, const int
          LDA, const double *B, const int LDB, const double BETA,
          double *C, const int LDC)

 - Function: void cblas_dsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const double *A, const
          int LDA, const double BETA, double *C, const int LDC)

 - Function: void cblas_dsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const double ALPHA, const double *A,
          const int LDA, const double *B, const int LDB, const double
          BETA, double *C, const int LDC)

 - Function: void cblas_dtrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double *A, const
          int LDA, double *B, const int LDB)

 - Function: void cblas_dtrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double *A, const
          int LDA, double *B, const int LDB)

 - Function: void cblas_cgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *B, const int LDB,
          const void *BETA, void *C, const int LDC)

 - Function: void cblas_csymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_csyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void *ALPHA, const void *A, const int
          LDA, const void *BETA, void *C, const int LDC)

 - Function: void cblas_csyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const void *BETA, void
          *C, const int LDC)

 - Function: void cblas_ctrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_ctrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_zgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *B, const int LDB,
          const void *BETA, void *C, const int LDC)

 - Function: void cblas_zsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_zsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void *ALPHA, const void *A, const int
          LDA, const void *BETA, void *C, const int LDC)

 - Function: void cblas_zsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const void *BETA, void
          *C, const int LDC)

 - Function: void cblas_ztrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_ztrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_chemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_cherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const void *A, const int
          LDA, const float BETA, void *C, const int LDC)

 - Function: void cblas_cher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const float BETA, void
          *C, const int LDC)

 - Function: void cblas_zhemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_zherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const void *A, const int
          LDA, const double BETA, void *C, const int LDC)

 - Function: void cblas_zher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const double BETA,
          void *C, const int LDC)

 - Function: void cblas_xerbla (int P, const char *ROUT, const char
          *FORM, ...)


File: gsl-ref.info,  Node: GSL CBLAS Examples,  Prev: Level 3 CBLAS Functions,  Up: GSL CBLAS Library

Examples
========

   The following program computes the product of two matrices using the
Level-3 BLAS function SGEMM,

     [ 0.11 0.12 0.13 ]  [ 1011 1012 ]     [ 367.76 368.12 ]
     [ 0.21 0.22 0.23 ]  [ 1021 1022 ]  =  [ 674.06 674.72 ]
                         [ 1031 1032 ]

The matrices are stored in row major order but could be stored in column
major order if the first argument of the call to `cblas_sgemm' was
changed to `CblasColMajor'.

     #include <stdio.h>
     #include <gsl/gsl_cblas.h>
     
     int
     main (void)
     {
       int lda = 3;
     
       float A[] = { 0.11, 0.12, 0.13,
                     0.21, 0.22, 0.23 };
     
       int ldb = 2;
     
       float B[] = { 1011, 1012,
                     1021, 1022,
                     1031, 1032 };
     
       int ldc = 2;
     
       float C[] = { 0.00, 0.00,
                     0.00, 0.00 };
     
       /* Compute C = A B */
     
       cblas_sgemm (CblasRowMajor,
                    CblasNoTrans, CblasNoTrans, 2, 2, 3,
                    1.0, A, lda, B, ldb, 0.0, C, ldc);
     
       printf("[ %g, %g\n", C[0], C[1]);
       printf("  %g, %g ]\n", C[2], C[3]);
     
       return 0;
     }

To compile the program use the following command line,

     gcc demo.c -lgslcblas

There is no need to link with the main library `-lgsl' in this case as
the CBLAS library is an independent unit. Here is the output from the
program,
     $ ./a.out
     [ 367.76, 368.12
       674.06, 674.72 ]


File: gsl-ref.info,  Node: Reporting Bugs,  Next: GNU General Public License,  Prev: GSL CBLAS Library,  Up: Top

Reporting Bugs
**************

   A list of known bugs can be found in the `BUGS' file included in the
GSL distribution.  Details of compilation problems can be found in the
`INSTALL' file.

   If you find a bug which is not listed in these files please report it
to the mailing list <gsl-discuss@sources.redhat.com>.

   All bug reports should include:

   * The version number of GSL

   * The hardware and operating system

   * The compiler used, including version number and compilation options

   * A description of the bug behaviour

   * A short program which exercises the bug

Thank you.

